[[{"l":"Documentation has moved","p":["This documentation is no longer being updated. For the most up to date information, visit DevHub."]}],[{"l":"Personas","p":["alt text"]}],[{"i":"#","p":["Setup a new namespace for onboarding services on the BC Gov API Gateway."]},{"l":"API Provider Quick Start","p":["NOTE: As of Sep 19, 2023, we have upgraded our command line interface to version 2. This user journey goes through the steps with the new CLI. If you are looking for Version 1 of the user journey, please go here.","The following steps guide an API Provider through setting up an API on the BC Government API Gateway in a Test/Training instance. At the end of the guide, you will have a public API endpoint that is protected using the OAuth2 Client Credential Grant."]},{"l":"1. Download the gwa CLI","p":["The gwa CLI is available for Linux, MacOS, and Windows at https://github.com/bcgov/gwa-cli/releases/tag/v2.0.11. For this tutorial, if you have access to a Platform Services Openshift cluster, you can use the Openshift Terminal and run:"]},{"l":"2. Login","p":["Log into the API Services Portal with your IDIR account."]},{"l":"3. Apply Configuration","p":["Templates are available for generating gateway configuration for popular integration patterns. Below has one that uses the Client Credentials Oauth2 Grant and uses a Shared Identity Provider.","First, create a new namespace.","Second, choose a vanity url: MYSERVICE.api.gov.bc.ca.","Then run the following command, substituting MYSERVICE with your unique name for your API.","If you know your upstream service, you can specify that as well, or you can use the example one https://httpbin.org provided.","Apply changes:","You can confirm the health of the connection between the API Gateway and the upstream service by running:"]},{"l":"4. Review Setup","p":["To review what configuration has been setup, log into the API Services Portal, go to the Namespaces tab, and select the newly created namespace.","From here, you can go to Activity to review what configuration has been setup.","What you have setup:","Vanity url: MYSERVICE.dev.api.gov.bc.ca","Protected by an SSL *.api.gov.bc.ca certificate","Protected with the Client Credential grant using OCIO SSO Gold cluster","Separation of concerns for authentication and authorization"]},{"l":"5. Access your API","p":["Go to the Namespaces tab in the API Services Portal and click the Preview in Directory link in the Products panel.","You will see a card with the title of the Dataset that you created earlier.","Click the title, then click Request Access.","Choose or create an Application, select the Dev environment, and click Request Access Continue.","Clicking Generate Secrets will generate a Client ID and Secret pair with a Token URL. Make a note of this information as it will be used to request a JWT Token.","To get a JWT Token, run the following command:","Extract the access_token and put it into an environment variables TOK.","It should return header information similar to the following:"]},{"i":"6-what-to-try-next","l":"6. What to try next?"},{"l":"Connect with the BC Government API Community","p":["Post a message on Rocket.Chat #aps-ops."]},{"l":"Read Our Other Guides and Resources","p":["Find information about authentication and authorization patterns, reference implementations, plugin usage and much more.","Monitor your Services: View metrics for performance, traffic and trends.","Gateway Administration: Add team members and create service accounts.","Explore Different Plugins","Upstream Service Setup","API Discovery: Setup metadata about your APIs for discovery.","API Access: Approve and administer controls for consumer access to your APIs.","CI/CD Integration","Use the client-credentials flow to protect your API (see Client Credential Protection)."]},{"i":"ready-for-production","l":"Ready for Production?","p":["Our production instance supports all your environments, so once you know what you are building and are ready to deploy your \"dev\" environment, you can setup the API gateway in our production instance.","To get started, go to the API Services Portal at https://api.gov.bc.ca."]}],[{"i":"#","p":["Setup a new namespace for onboarding services on the BC Gov API Gateway."]},{"l":"API Provider User Journey","p":["The following steps guide an API Provider through setting up an API on the BC Government API Gateway in a Test/Training instance. If you are ready to deploy to the Production instance, use the links available at the end of this document ( here)."]},{"l":"1. Register a New Namespace","p":["A namespace represents a collection of Kong Gateway Services and Routes that are managed independently.","Create a new namespace:","Log in to the API Services Portal as an API Provider using your IDIR.","Click the namespace drop-down menu (top right next to your user name - it may show No Active Namespace).","Click Create New Namespace.","Enter the Namespace name.","Click Create.","NOTE: The name must be a lowercase alphanumeric string between 5 and 15 characters (RegExp reference: ^[a-z][a-z0-9-]{4,14}$).","You can manage namespaces by clicking the namespace drop-down menu and selecting the required namespace."]},{"l":"2. Generate a Service Account","p":["Access.Manage","Click Service Accounts, then Cick New Service Account.","Content.Publish","CredentialIssuer.Admin","GatewayConfig.Publish","Go to the Namespaces tab.","Namespace.Manage","Namespace.View","NOTE: Make sure to save the generated Client ID and Secret.","Permission","Permission to approve/reject access requests to your APIs","Permission to create Authorization Profiles for integrating with third-party Identity Providers; yhe profiles are available to be used when configuring Product Environments","Permission to publish gateway configuration to Kong and view the status of the upstreams","Permission to update the Access Control List for controlling access to viewing metrics, service configuration and service account management (effectively a superuser for the namespace)","Permission to update the documentation on the portal","Read-only access to the namespace","Scope","Select the GatewayConfig.Publish permission for the Service Account and click Share. A new credential will be created - make a note of the ID and Secret.","The following list describes the permissions:"]},{"l":"3. Prepare Configuration","p":["The gateway configuration can be hand-crafted or you can use a command line interface that APS developed called gwa to convert your OpenAPI v3 spec to a Kong configuration.","Run the following commands to create a basic configuration of a single service and route:","Review the gwconfig.yaml file to see what it is doing. There is a single upstream service defined to be httpbin.org, and a single route $NAME.api.gov.bc.ca that passes all GET requests to the upstream service.","To view common plugin configuration go to Common Controls","To learn about other available plugins, navigate to Gateway Plugins on the sidebar of this page.","Declarative Config: DecK is used to sync your configuration with Kong; see https://docs.konghq.com/deck/overview/ for more information.","Splitting Your Config: A namespace tag with the format ns.$NS is mandatory for each service/route/plugin. But, if you have separate pipelines for your environments (i.e., dev, test and prod), you can split your configuration and update the tags with the qualifier. For example, you can use a tag ns.$NS.dev to sync the Kong configuration for dev Service and Routes only."]},{"l":"OCP Network Policies","p":["If your service is running on the Openshift platform, you should specify the Kubernetes Service in the Service.host. It must have the format: name.ocp-namespace.svc. Also, make sure your Service.port matches your Kubernetes Service Port. Any Security Policies for egress from the Gateway will be setup automatically on the API Gateway side.","The Kong Gateway runs Data Planes in both Silver and Gold clusters.","Silver Cluster","You will need to create a Network Policy on your side similar to the following to allow the Gateway's test and prod environments to route traffic to your API:","Gold Cluster","If your service is running on Gold, you will need to contact the APS team so that we can properly provision the namespace on the correct Kong Data Plane and ensure the correct DNS is setup for your routes. The following is the Network Policy on Gold."]},{"l":"Private Routing","p":["By default, publically available endpoints are created based on Kong Routes where the hosts must end with *.api.gov.bc.ca or *.apps.gov.bc.ca.","There are use cases where the clients that are consuming the API are on the same Openshift platform that the API is deployed to. In this case, there is a security benefit of not making the API endpoints publically available.","To support this, the route hosts can be updated with a host that follows the format: api-name.cluster.local. When the configuration is published to Kong, an Openshift Service is created with a corresponding Service Serving Certificate (SSC), which is routeable from within the Openshift cluster.","An example Gateway configuration for an upstream API deployed in the Silver cluster would be:","A new endpoint is then created in our Silver Test environment as: https://gw-my-service.264e6f-test.svc.cluster.local(if it was configured in our Prod environment, it would be: https://gw-my-service.264e6f-prod.svc.cluster.local)","To verify that the endpoint is callable, you can deploy a simple pod that mounts the service-ca to be used for verifying the SSC.","From the Pod's Terminal, you can then run:","You should see a 200 response with a valid UUID."]},{"l":"Upstream mTLS","p":["Require mTLS between the Gateway and your Upstream Service? To support mTLS on your Upstream Service, you will need to provide client certificate details and if you want to verify the upstream endpoint then the ca_certificates and tls_verify is required as well. Example:","NOTE: You must generate a UUID ( python -c 'import uuid; print(uuid.uuid4())') for each certificate and ca_certificate you create (set the id) and reference it in your services details.","HELPER: Python command to get a PEM file on one line: python -c 'import sys; import json; print(json.dumps(open(sys.argv[1]).read()))' my.pem"]},{"l":"Using an OpenAPI Spec","p":["Run: ./gwa new and follow the prompts.","Example:","See below for the gwa CLI install instructions."]},{"l":"4. Apply Gateway Configuration","p":["The Swagger console for the gwa-api can be used to publish the Kong Gateway configuration, or you can use the gwa Command Line."]},{"i":"41-gwa-command-line-recommended","l":"4.1. gwa Command Line (recommended)","p":["Install (for Linux)","Using MacOS or Windows? Download here: https://github.com/bcgov/gwa-cli/releases/tag/v1.3.1","NOTE: As of version 1.2+ there is support for v2 of the APS API. To continue using v1 of the API, ensure that the API Version is set to 1.","Configure","Run the following to configure a .env file that will hold all the env vars for running gwa:","NOTE: Use the Client ID and Secret obtained from step 2.","NOTE: The -T indicates the APS Test environment. For production use -P.","Run ./gwa status to confirm that access to the Gateway is working.","Publish","If you want to see the expected changes, but not actually apply them, you can run:"]},{"i":"42-swagger-console-optional","l":"4.2. Swagger Console (optional)","p":["Go to gwa-api Swagger Console.","Select the PUT/namespaces/{namespace}/gateway API.","The Service Account uses the OAuth2 Client Credentials Grant Flow. Click the lock link (on the right) and enter the Service Account credentials generated in Section 2.","For the Parameter namespace, enter the namespace you created in Section 1.","Set dryRun to true.","Select a configFile file.","Send the request."]},{"i":"43-postman-optional","l":"4.3. Postman (optional)","p":["From the Postman App, click Import and go to the Link tab.","Enter the URL: https://openapi-to-postman.api.gov.bc.ca/?u=https://gwa-api-gov-bc-ca.test.api.gov.bc.ca/docs/v2/openapi.yaml","After creation, go to Collections and right-click on the Gateway Administration (GWA) API collection and select edit.","Go to the Authorization tab, enter your Client ID and Client Secret, and click Get New Access Token.","You should get a successful dialog to proceed. Click Proceed and Use Token.","You can verify that the token works by going to the Collection Return key information about authenticated identity and clicking Send."]},{"i":"44-helm-chart","l":"4.4. Helm Chart","p":["There is a helm chart available that provisions resources on the API Gateway, API Services Portal and OCP (Network Policy).","The helm chart is located at: https://github.com/bcgov/helm-charts/tree/master/charts/aps-gateway-ns","The chart creates Jobs to provision the resources, and it expects secrets to be setup in the common Hashicorp Vault https://vault.developer.gov.bc.ca instance.","Prepare a config.yaml file:","update the security context for the particular OCP project","the license plate af9xxx can be replaced with your own OCP license plate","the secret example-dev should be the name of the secret that has the following keys defined (information from a APS Portal namespace Service Account):","GWA_ACCT_ID","GWA_ACCT_SECRET","NAMESPACE","TOKEN_URL","GWA_INIT_FLAG : Set to either -T or -P representing the API Gateway environment","update the Pod matching networkPolicy.matchLabels for the Network Policy for Ingress traffic from the API Gateway","The yaml created earlier for the API Gateway ( gwconfig.yaml) can be used as part of the helm configuration.","Run Helm to install the Jobs:"]},{"l":"5. Verify Routes","p":["To verify that the Gateway can access the upstream services, run the command: ./gwa status.","In the APS test environment, the hosts that you defined in the routes are altered. To see the actual hosts, log into the API Services Portal, go to the Namespaces tab, go to Gateway Services, and select your particular service to get the routing details."]},{"l":"6. View Metrics","p":["You can view the following metrics in real-time for the Services that you configure on the Gateway:","Request Rate: Requests / Second (by Service/Route, by HTTP Status)","Latency: Standard deviations measured for latency inside Kong and on the Upstream Service (by Service/Route)","Bandwidth: Ingress/egress bandwidth (by Service/Route)","Total Requests: In 5 minute windows (by Consumer, by User Agent, by Service, by HTTP Status)","All metrics can be viewed by an arbitrary time window; default is Last 24 Hours.","Go to Grafana to view metrics for your configured services.","You can also access summarized metrics from the API Services Portal by going to the Namespaces tab and clicking the Gateway Services link.","NOTE: A shortcut to Grafana is provided from the Gateway Services page by clicking View metrics in real-time."]},{"l":"7. Grant Access to Other Users","p":["To grant access to other users, you need to grant them the appropriate Scopes. You can do this from the API Services Portal by selecting the relevant Namespace and going to the Namespaces Namespace Access page. From there, you can grant users access to the Namespace."]},{"i":"8-add-to-your-cicd-pipeline","l":"8. Add to your CI/CD Pipeline","p":["Update your CI/CD pipelines to run the gwa-cli to keep your services updated on the gateway."]},{"i":"81-github-actions-example","l":"8.1. Github Actions Example","p":["In the repository where you maintain your CI/CD Pipeline configuration, use the Service Account details from Section 2 to set up two Secrets:","GWA_ACCT_ID","GWA_ACCT_SECRET","Add a .gwa folder (can be called anything) that will be used to hold your gateway configuration.","Github Workflow example:"]},{"i":"82-helm-chart","l":"8.2. Helm Chart"},{"l":"9. Share your API for Discovery","p":["Package your APIs and make them available for discovery through the API Services Portal and BC Data Catalogue.","The API Services Portal Directory organizes your APIs by Datasets, Products and Environments. You can manage them via an API or through the UI.","To use the Directory API, the following scopes are required:","For contents(documentation), the service account must have the Content.Publish scope","For datasets, products and environments, the service account must have the Namespace.Manage scope","For credential issuers, the service account must have the CredentialIssuer.Admin scope","How to update scopes:","Click Namespaces in the navigation bar","Click Namespace Access, and then Service accounts with access","Click the ellipses to the right of the appropriate service account and select Edit Access","View the Directory API:","V1: V1 Directory API Console","V2: V2 Directory API Console"]},{"i":"91-setup-your-draft-dataset","l":"9.1 Setup your Draft Dataset","p":["If you do not have a Dataset already defined in the BC Data Catalogue, you can create a draft in the API Services Portal:","Click Help in the top right, then API Docs","Click the green Authorize button, then enter your Client ID and Secret","Click the PUT /namespaces/{ns}/datasets accordion item","Click Try it out, enter your namespace, personalize any fields in the Request body, remove the lines pertaining to organization, and click Execute","Scroll down and ensure a 200 Response was received","List of available organizations:","https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/organizations","Use the following to get the organizationUnit:","https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/console/#/Organizations/organization-units"]},{"i":"92-setup-your-product","l":"9.2 Setup your Product","p":["How to add a Product:","Navigate to Namespaces -> Products","Click New Product in the top right","How to associate Product with a Dataset:","Click the ellipses next to Add Env","Find your newly created dataset and click Update","There are various patterns for protecting an API that the Kong API Gateway supports. In the following example, the API is protected with Kong's API Key and ACL plugins ( kong-api-key-acl flow)."]},{"i":"93-update-gateway-configuration","l":"9.3 Update Gateway Configuration","p":["In the previous section the example defined an environment that is protected using Kong's API Key and ACL plugins. To protect the Service, the corresponding plugins need to exist on the Gateway for that service or route. The ACL allow corresponds to the unique Environment ID defined in Section 9.2.","How to Update Gateway Configuration:","In Namespaces -> Products, click edit next to product environment","For Authorization, choose Kong API Key with ACL Flow. Assign Terms of Use if desired.","Check Require Approval","Click View Plugin Template, and add the plugin configuration to the service a-service-for-$NS in the gwconfig.yaml file you created in Section 3.","Re-run the publish command: ./gwa pg gwconfig.yaml. This will protect the upstream service with an API Key.","Back in the portal, click Continue","Drag and drop the available service to Active Services","Click Save"]},{"i":"94-check-access","l":"9.4 Check Access","p":["You can also get the URL by going to Namespaces -> Gateway Services and clicking the drop down arrow on the right.","You will get an error: No API key found in request."]},{"i":"95-get-an-api-key","l":"9.5 Get an API Key","p":["Go to the Namespaces tab in the API Services Portal. Click the Preview in Directory link in the Products panel.","You will see a card with the title of the Dataset that you created in Section 9.1.","Click the title, then click Request Access.","Choose or create an Application, select the Dev environment, and click Request Access Continue.","Clicking Generate Secrets will generate your API Key. Make a note of the API Key and Client ID.","If Require Approval was selected in section 9.3, navigate to Namespaces -> Consumers and accept the request.","NOTE: An Environment can be configured for auto-approval. For the sample, Dev auto-approval is enabled so the Access Manager does not need to approve the request before getting access.","When you run the command:","It should return header information similar to the following:"]},{"i":"96-manage-access","l":"9.6 Manage Access","p":["NOTE: To manage access to your APIs, you must have the Access.Manage permission for the Namespace.","As an Access Manager, you can manage the new Consumer by going to the Namespaces tab, and selecting Consumers.","Here you should see the newly created Consumer. Click on the name.","You can administer Controls such as rate limiting and IP restrictions.","You can administer Authorization by toggling access to the particular Product and Environment."]},{"i":"97-enabling-for-discovery","l":"9.7 Enabling for Discovery","p":["Once the content is complete and you have applied the appropriate controls to your API, you are ready to make it available on the API Directory.","Prerequisite: Your namespace must be approved for use by a Ministry Organization Administrator. This is a one-time process to link the Ministry to the Namespace and can be performed on the Portal by going to the \"Namespaces\" tab, selecting your namespace, and clicking the \"Add Organization\" button. The appropriate Organization Admin will be notified by email.","Once approved, you must make an Environment active for the corresponding Product Environment to appear in the API Directory. You can do this by either updating the Product Environment configuration above to active: true, or go to the API services portal UI, click the edit environment details, and click on the checkbox 'enable environment'."]},{"i":"98-view-your-product-in-the-api-directory","l":"9.8 View Your Product in the API Directory","p":["Find your API in the API Services Portal Directory.","It is now ready to receive access requests from the community!"]},{"i":"10-what-to-try-next","l":"10 What to try next?"},{"i":"101-connect-with-the-bc-government-api-community","l":"10.1 Connect with the BC Government API Community","p":["Post a message on Rocket.Chat #aps-ops."]},{"i":"102-read-our-other-guides","l":"10.2 Read Our Other Guides","p":["Find information about authentication and authorization patterns, reference implementations, plugin usage and much more."]},{"i":"103-protect-your-api-using-an-external-identity-provider","l":"10.3 Protect Your API using an External Identity Provider","p":["Use the client-credentials flow to protect your API (see Client Credential Protection)."]},{"i":"104-use-the-access-approval-process","l":"10.4 Use the Access Approval Process","p":["Enable approval for an Environment and go through the access request process by requesting access, and playing the role of Access Manager to review the request and approve access."]},{"i":"105-publish-your-documentation-on-the-portal","l":"10.5 Publish Your Documentation on the Portal"},{"l":"Production Links","p":["API Services Portal","gwa-api Swagger Console","gwa-api Postman Collection","Gateway Metrics - Grafana"]}],[{"i":"#","p":["Configuration the Gateway with an Identity Provider and Client Credential Grant"]},{"l":"Protecting an API with OAuth2 Client Credential Flow","p":["Steps for protecting and calling an API using the OAuth2 Client Credential Grant.","Configuring an API on the Kong Gateway","Granting Access to the IdP","Client Requesting Access","Provider Approving Access","Client Retrieving the Access Token","Client Calling an API","Gateway Proxying to Upstream","alt text"]},{"l":"1. Configuring an API on the Kong Gateway","p":["The API Provider User Journey document provides the steps to enable a new API on the Kong Gateway. It will walk you through the creation of a new Namespace, and a Service Account that can be used to configure the Kong Gateway and the Authorization Profile described in step 2.","Once the API is working on the Gateway, you can then define a Product, which can be made available on the API Services Portal Directory."]},{"l":"2. Granting Access to the IdP"},{"l":"Custom IdP"},{"i":"a-prerequisites","l":"a) Prerequisites","p":["Before the Portal can be configured, a new set of credentials must be created on the IdP. For this tutorial, we will include the steps when Keycloak is the IdP.","Create a new Client on the IdP","Create a new client with Access Type confidential. All flows except Service Accounts should be turned off.","Make a note of the Client ID and Client Secret, they will be used when the Portal Authorization Profile is created.","The Full Scope Allowed can be turned off and the realm-management client roles for manage-clients and manage-users should be added.","Add the manage-clients and manage-users client roles to the Service Account Roles."]},{"i":"b-setup-the-authorization-profile","l":"b) Setup the Authorization Profile","p":["A credential with CredentialIssuer.Admin is required to update Authorization Profiles ( CredentialIssuer).","Authorization Profiles can be setup either via the Portal or by using a Service Account with the Portal Directory API.","Update the below CredentialIssuer to include the environment details and the Scopes and Roles setup for authorization."]},{"i":"c-link-the-authorization-profile-to-the-product","l":"c) Link the Authorization Profile to the Product","p":["Before making the API available on the Directory, the API should be configured with a plugin for protecting access. To do this, an API Provider can edit the Product details to select Oauth2 Client Credential Flow and the newly created Authorization Profile."]},{"i":"d-update-your-gateway-configuration-with-the-plugin","l":"d) Update your Gateway Configuration with the Plugin","p":["Update your Gateway Configuration to include the jwt-keycloak plugin.","HINT: When you configure the Product Environment, a Plugin Template will be displayed - this can be a starting point for protecting your API on the Gateway.","Finally, from the Portal, enable the Environment to make it available on the API Directory."]},{"i":"e-optional-configuration","l":"e) Optional Configuration","p":["Client Mappers","Edit the Authenticated Access Policies -> Allowed Protocol Mapper Types to include the oidc-audience-mapper.","If you have Client Scopes that you want to have controlled by the Portal, add them to the Realm's Client Scopes and Default Client Scopes on the IdP.","If you have Roles that you want to have controlled by the Portal, add them to the Client's Roles.","If you want to use the Authorization services, then set Authorization Enabled to ON for the Client on the IdP. You will also want to set the Decision Strategy to Affirmative.","In Keycloak, this is updated under the Realm's Client Registration-> Client Registration Policies.","resourceAccessScope- The API Services Portal has not completed the implementation for the scenario where the User is the Resource Owner ( resourceAccessScope is left blank). It uses the Token Exchange capability but it's an optional service available on Keycloak and has numerous caveats around it. Please contact the APS team if interested to know more.","resourceAccessScope: Used in the case where the Resource Server owns all the resources, a user must have the resourceAccessScope assigned in order to be allowed to manage the access. If it is not set, then the user has to be the resource owner in order to manage access.","resourceScopes: A list of the Authorization Scopes managed for the particular Resources (required)","resourceType: The Resource Type of the resources that will be managed (required)","Roles","Scopes","The audience is an optional mapper that can be added to a Client.","The IdP needs to have a policy that allows Audience to be added as a Protocol Mapper to the client.","UMA2 Authorization Resources","Update the CredentialIssuer record above to match the availableScopes with the ones added on the IdP.","Update the CredentialIssuer record above to match the clientRoles with the ones added on the IdP.","Update the following CredentialIssuer attributes:"]},{"l":"Shared IdP","p":["Shared IdP is a new feature that allows you, as an API Provider, to leverage the SSO Gold-tier Keycloak cluster for managing Client Credentials, without having to deal with it directly. The APS team have a custom realm on this Keycloak called apigw which the API Services Portal administers.","Token Issuers:","https://dev.loginproxy.gov.bc.ca/auth/realms/apigw","https://test.loginproxy.gov.bc.ca/auth/realms/apigw","https://loginproxy.gov.bc.ca/auth/realms/apigw","To use it, perform the following steps:"]},{"i":"a-setup-the-authorization-profile","l":"a) Setup the Authorization Profile","p":["A credential with CredentialIssuer.Admin is required to update Authorization Profiles ( CredentialIssuer).","Authorization Profiles can be setup either via the Portal or by using a Service Account with the Portal Directory API.","Update the below CredentialIssuer with the name and description that makes sense to you, and include the desired Roles setup for authorization."]},{"i":"b-link-the-authorization-profile-to-the-product","l":"b) Link the Authorization Profile to the Product","p":["Before making the API available on the Directory, the API should be configured with a plugin for protecting access. To do this, an API Provider can edit the Product details to select Oauth2 Client Credential Flow and the newly created Authorization Profile."]},{"i":"c-update-your-gateway-configuration-with-the-plugin","l":"c) Update your Gateway Configuration with the Plugin","p":["Update your Gateway Configuration to include the jwt-keycloak plugin.","HINT: When you configure the Product Environment, a Plugin Template will be displayed - this can be a starting point for protecting your API on the Gateway.","Finally, from the Portal, enable the Environment to make it available on the API Directory."]},{"i":"d-optional-configuration","l":"d) Optional Configuration","p":["Roles","If you have Roles that you want to have controlled by the Portal, add them to the Client's Roles.","Update the CredentialIssuer record above with the clientRoles you want to manage."]},{"l":"3. Client Requesting Access","p":["Request access to the API via the API Services Portal and generate the credentials to be used below.","The Portal will use the credentials setup in the Authorization Profile, to create a disabled Client on the IdP (with any applicable Client Mappers) and return the credentials to the Requesting user."]},{"l":"4. Provider Approving Access","p":["An Access Manager reviews the access request, sets any additional controls, grants the relevant permissions (i.e./ scopes and roles), and approves. The Portal will enable the Client and apply the permissions on the IdP.","The Portal sends a notification to the Requester letting them know that API Access has been approved (or rejected)."]},{"l":"5. Client Retrieving the Access Token","p":["Using the Credentials generated in step 3, the Requester calls the Token endpoint to get a new JWT token."]},{"l":"6. Client Calling the API","p":["Extract the Access Token from the response, set it in a TOK environment variable, and call the API.","The API Gateway's jwt-keycloak plugin will use the IdP's public keys to validate the token and depending on the plugin configuration, validate the scopes or roles."]},{"l":"7. Gateway Proxying to Upstream","p":["A technical, but important step in the integration is the Gateway proxying the request to the Upstream Service API and deciding on the different options for securing that interaction.","Options:","Network Policy: If the Services are co-located on the same Cluster as the Gateway's Data Plane, then native network policies can be used to protect the channel between the Gateway and the Upstream Service. This approach is used for Services running on the Openshift Silver cluster.","Kong Upstream JWT: This plugin adds a signed JWT to the request headers so that the Upstream Service can verify that the request came specifically from the Gateway.","Client Certificates: Client certificates (mTLS) provides a way for the Upstream Service to provide a secure channel from the Gateway and to verify that the request came specifically from the Gateway.","Firewall IP Restrictions: This provides a low-level of protection by limiting the IPs to the ones of the Gateway Data Planes. Because the Data Planes are typically on shared infrastructure, this would still allow traffic from other tenants. This might be acceptable based on the type of data delivered by or to the Upstream Service."]},{"l":"Variations"},{"l":"Signed JWT","p":["The Authorization Profile clientAuthenticator was set to client-secret in this tutorial, but there is an alternate setup that can be used:","client-jwt-jwks-url(Signed JWT with JWKS URL or Certificate)","In this scenario, when a Client is requesting access, they will be required to enter details about the client assertion certificates. The details can either be a public JWKS URL that holds the public key information for a key pair, or providing just the public key information. The information will be used in step 5 when retrieving the Bearer Token. For further details, you can see the specific examples Signed JWT w/ Hosted JWKS or Signed JWT w/ Certificate."]}],[{"i":"#","p":["Accessing an API with Signed JWT and Client Credential Grant"]},{"l":"Signed JWT with Certificate","p":["The following example uses NodeJS code to show how to prepare for signed JWT authentication to an API on the BC Government API Gateway."]},{"l":"1. Generate a Certificate Key Pair"},{"l":"2. Request Access to an API","p":["Go to the API Services Portal and request access to an API that is configured with the Signed JWT protection. After selecting the environment, you will be prompted to provide a \"Public Key\", which will be the contents of the client.crt created in step 1. After requesting access, you will be provided with some secrets.","Make a note of the Client ID, Issuer and Token Endpoint."]},{"l":"3. Request a Client JWT Token","p":["Requesting a Client JWT Token is a two-step process:","Build a Client Assertion Token that is signed with the private key you generated earlier.","Request a token from the Token Endpoint using the Client Assertion.","The following sample performs both steps:"]},{"l":"4. Call the API","p":["Call the API using the newly generated Token returned from the Identity Provider."]}],[{"i":"#","p":["Accessing an API with Signed JWT and Client Credential Grant"]},{"l":"Signed JWT with Hosted JWKS","p":["The following example uses NodeJS code to show how to prepare for signed JWT authentication to an API on the BC Government API Gateway."]},{"l":"1. Generate a Certificate Key Pair"},{"l":"2. Publish the Public Key","p":["Publish the Public Key in JWKS Format at a location that is publically accessible.","Place the JWKS JSON file somewhere that it can be reached publically.","For testing, an easy option is to use Github Pages and publish the JWKS JSON file in order to make a public URL. For example:"]},{"l":"3. Request Access to an API","p":["Go to the API Services Portal and request access to an API that is configured with the Signed JWT protection. After selecting the environment, you will be prompted to provide a \"JWKS URL\", which will be the URL of the JWKS file that you published in step 2. After requesting access, you will be provided with some secrets.","Make a note of the Client ID, Issuer and Token Endpoint."]},{"l":"4. Request a Client JWT Token","p":["Requesting a Client JWT Token is a two-step process:","Build a Client Assertion Token that is signed with the private key you generated earlier.","Request a token from the Token Endpoint using the Client Assertion.","The following sample performs both steps:"]},{"l":"5. Call the API","p":["Call the API using the newly generated Token returned from the Identity Provider."]}],[{"l":"OIDC and RBAC Protection","p":["This guide walks through the steps to protect your Application using Keycloak SSO and the APS Kong Gateway.","alt text"]},{"l":"1. Configure a confidential client","p":["Go to the Common Hosted SSO (CSS) site ( https://bcgov.github.io/sso-requests) and request a new confidential client.","After the client has been provisioned, you can go to the Role Management tab to configure the Roles you want to use to protect resources in your Application.","The Assign Users to Roles can be used to administer User permissions."]},{"l":"2. Configure the APS Kong Gateway","p":["acl","An example to get idir_username and email passed, would be:","If hide_groups_headers is false then X-Authenticated-Groups will be a request header with a comma-delimited list of roles that the user belongs to.","If your upstream service is stateless, then you can remove the cookie before the request is forwarded to it.","If your upstream service needs specific attributes, the header_claims and header_names config can be used to pass claims as request headers to the upstream service. A subset of the claims available:","oidc","Pre-requisites:","request-transformer (optional)","The acl plugin will enforce that the user's client_roles includes the roles defined in the allow list.","The groups_claim must be client_roles as that is what the SSO service uses for the roles that the user has assigned to it.","To protect your application, there are two plugins that need to be configured: oidc and acl.","Update discovery if you are using SSO other than dev or if using a non-standard realm","You have a Service Account created with the GatewayConfig.Publish permission","You have completed your minimal service/route configuration and published it to the APS Kong Gateway","You have created a namespace in the API Services Portal","You have your application deployed in the Openshift Silver cluster","Your Network Policy has been configured to allow traffic from the APS project space"]},{"l":"Outcome","p":["Vanity url: my-application.apps.gov.bc.ca","Protected by SSL *.apps.gov.bc.ca certificate","Separation of concerns for authentication and authorization"]}],[{"l":"Query Kong Metrics Using Service Account"},{"l":"Overview","p":["Using a service account generated within your namespace, you can send Prometheus queries to retrieve Kong metrics. Some examples will be provided, but any PromQL (Prometheus Query Language) query can be sent."]},{"l":"Prerequisites","p":["Namespace in the API Gateway","Service Account associated with the namespace","Service Account should have at least Namespace.View permissions","Ideally an active service experiencing some traffic"]},{"i":"tldr","l":"TL;DR","p":["Generate an access token with your Service Account. Use the token to send PromQL queries with the following command. Note that queries should be URL encoded."]},{"l":"Detailed Instructions"},{"l":"Getting an Access Token","p":["Using your Service Account credentials, generate an access token:","Copy and save the access token:"]},{"l":"Running Queries","p":["Once you have an access token, you can run queries using:"]},{"l":"Example Queries","p":["Reminder that if you wish to modify the PromQL queries, it should be URL encoded before sending the request.","Run the following before running the example queries below:"]},{"l":"To execute queries","p":["Run one of the export QUERY=... example blocks, then run one of the Execute ... blocks below to execute that query:"]},{"i":"rate-per-second-per-routeservice-by-status-code","l":"Rate per Second per route/service by Status Code"},{"i":"req5m-per-routeservice","l":"Req/5m per route/service"},{"l":"Request time per Service","p":["Raw PromQL Query:"]},{"i":"total-non-200-requests-per-second-by-route-code","l":"Total Non-200 requests per second by route, code"},{"l":"Help"},{"l":"Prometheus HTTP API Documentation","p":["View the Prometheus HTTP API Documentation for additional information on sending requests to the Prometheus API.","Some helpful takeaways:","Send a GET request to the /metadata endpoint to list all available metrics.","You can limit the number of results using the ?limit=number query string parameter","Use the ?metric=string qsp to get information about a specific metric.","Use /labels to get a list of available labels.","Use /label/label_value/values to get possible values for a given label_value","Use /series to get a list of time series that match a given label set. View Prometheus API docs for more info."]},{"l":"PromQL","p":["Check out the QUERYING PROMETHEUS documentation for the basics of forming PromQL queries.","I also felt this video was useful for learning PromQL basics."]},{"l":"Grafana and Additional Queries","p":["We have a number of panels in our Grafana dashboards showcasing a number of queries. Here some examples of on our dashboard, along with the associated PromQL queries:","Total Requests per second","sum(rate(kong_http_status[1m]))","Kong Proxy Latency per Service","histogram_quantile(0.90, sum(rate(kong_latency_bucket{type=\"kong\", service =~\".\",route=~\".\",1m])) by (service,le))","Upstream Time per Service","histogram_quantile(0.90, sum(rate(kong_latency_bucket{type=\"upstream\", service =~\".\",route=~\".\",}[1m])) by (service,le))","Total Requests (5m) by Consumer","sum(increase(konglog_service_consumer_counter[5m])) by (consumer, service, status) != 0","400 and 500 Errors","sum(increase(konglog_service_agent_counter{status!='200',status!='201',status!='204',status!='206',status!='301',status!='302',status!='304',service!=''}[5m])) by (service, status) != 0"]}],[{"l":"Monitor your Services"},{"l":"View Metrics","p":["You can view the following metrics in real-time for the Services that you configure on the Gateway:","Request Rate: Requests / Second (by Service/Route, by HTTP Status)","Latency: Standard deviations measured for latency inside Kong and on the Upstream Service (by Service/Route)","Bandwidth: Ingress/egress bandwidth (by Service/Route)","Total Requests: In 5 minute windows (by Consumer, by User Agent, by Service, by HTTP Status)","All metrics can be viewed by an arbitrary time window; default is Last 24 Hours.","Go to Grafana to view metrics for your configured services.","Environment","Grafana Link","TEST / TRAINING","https://grafana-apps-gov-bc-ca.test.api.gov.bc.ca","PRODUCTION","https://grafana.apps.gov.bc.ca","You can also access summarized metrics from the API Services Portal by going to the Namespaces tab and clicking the Gateway Services link.","NOTE: A shortcut to Grafana is provided from the Gateway Services page by clicking View metrics in real-time."]}],[{"l":"Gateway Administration"},{"l":"Grant Access to Other Users","p":["To grant access to other members of your team, you need to grant them the appropriate Scopes. You can do this from the API Services Portal by selecting the relevant Namespace and going to the Namespaces Namespace Access page. From there, you can grant users access to the Namespace.","Environment","API Services Portal Link","TEST / TRAINING","https://api-gov-bc-ca.test.api.gov.bc.ca","PRODUCTION","https://api.gov.bc.ca"]},{"l":"Using Service Accounts","p":["Service Accounts are credentials that can be used to access the APS Directory and Gateway APIs."]},{"l":"Generate a Service Account","p":["Login to the API Services Portal, select your namespace, and go to the Namespaces tab.","Click Service Accounts, then Cick New Service Account.","Select the GatewayConfig.Publish permission for the Service Account and click Share. A new credential will be created - make a note of the ID and Secret.","NOTE: Make sure to save the generated Client ID and Secret."]},{"l":"Available Permissions","p":["The following list describes the permissions:","Scope","Permission","Namespace.Manage","Permission to update the Access Control List for controlling access to viewing metrics, service configuration and service account management (effectively a superuser for the namespace)","Namespace.View","Read-only access to the namespace","GatewayConfig.Publish","Permission to publish gateway configuration to Kong and view the status of the upstreams","Content.Publish","Permission to update the documentation on the portal","CredentialIssuer.Admin","Permission to create Authorization Profiles for integrating with third-party Identity Providers; the profiles are available for use when configuring Product Environments","Access.Manage","Permission to approve/reject access requests to your APIs"]},{"l":"About the Admin APIs"},{"l":"Directory API","p":["Environment","Directory API Swagger Console Link","TEST / TRAINING","https://openapi.apps.gov.bc.ca?url=https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/openapi.yaml","PRODUCTION","https://openapi.apps.gov.bc.ca?url=https://api.gov.bc.ca/ds/api/v2/openapi.yaml"]},{"l":"Kong Gateway API","p":["Environment","Kong Gateway API Swagger Console Link","TEST / TRAINING","https://openapi.apps.gov.bc.ca?url=https://gwa-api-gov-bc-ca.test.api.gov.bc.ca/docs/v2/openapi.yaml","PRODUCTION","https://openapi.apps.gov.bc.ca?url=https://gwa.api.gov.bc.ca/docs/v2/openapi.yaml"]},{"l":"Swagger Console","p":["Go to gwa-api Swagger Console and select the PUT/namespaces/{namespace}/gateway API.","The Service Account uses the OAuth2 Client Credentials Grant Flow. Click the lock link (on the right) and enter the Service Account credentials generated in Section 2.","For the Parameter namespace, enter the namespace you created in Section 1.","Set dryRun to true.","Select a configFile file.","Send the request."]},{"l":"Postman","p":["From the Postman App, click Import and go to the Link tab, enter one of the below URLs.","Environment","Kong Gateway API Postman URL","TEST / TRAINING","https://openapi-to-postman.api.gov.bc.ca/?u=https://gwa-api-gov-bc-ca.test.api.gov.bc.ca/docs/v2/openapi.yaml","PRODUCTION","https://openapi-to-postman.api.gov.bc.ca/?u=https://gwa.api.gov.bc.ca/docs/v2/openapi.yaml","After creation, go to Collections and right-click on the Gateway Administration (GWA) API collection and select edit.","Go to the Authorization tab, enter your Client ID and Client Secret, and click Get New Access Token.","You should get a successful dialog to proceed. Click Proceed and Use Token.","You can verify that the token works by going to the Collection Return key information about authenticated identity and clicking Send."]}],[{"i":"cicd-integration","l":"CI/CD Integration"},{"i":"add-to-your-cicd-pipeline","l":"Add to your CI/CD Pipeline","p":["Update your CI/CD pipelines to run the gwa-cli to keep your services updated on the gateway.","Github Actions Example","In the repository where you maintain your CI/CD Pipeline configuration, use the Service Account details from Section 2 to set up two Secrets:","GWA_ACCT_ID","GWA_ACCT_SECRET","Add a .gwa folder (can be called anything) that will be used to hold your gateway configuration.","Github Workflow example:"]}],[{"l":"Gateway Configuration","p":["Declarative Config: DecK is used to sync your configuration with Kong; see https://docs.konghq.com/deck/overview/ for more information.","Splitting Your Config: A namespace tag with the format ns.$NS is mandatory for each service/route/plugin. But, if you have separate pipelines for your environments (i.e., dev, test and prod), you can split your configuration and update the tags with the qualifier. For example, you can use a tag ns.$NS.dev to sync the Kong configuration for dev Service and Routes only."]},{"l":"Plugins","p":["To view common plugin configuration go to Common Controls","To learn about other available plugins, navigate to Gateway Plugins on the sidebar of this page."]},{"l":"Private Routing","p":["A new service endpoint with SSL termination (using Service Serving Certificates) is then created in the APS project space for the given Openshift cluster, with the following format:","An example Gateway configuration for an upstream API deployed in the Silver cluster would be:","By default, publically available endpoints are created based on Kong Routes where the hosts must end with *.api.gov.bc.ca or *.apps.gov.bc.ca.","Cluster","Endpoint","From the Pod's Terminal, you can then run:","Gold PROD","Gold TEST","https://gw-MYSERVICE.264e6f-prod.svc.cluster.local","https://gw-MYSERVICE.264e6f-test.svc.cluster.local","https://gw-MYSERVICE.b8840c-prod.svc.cluster.local","https://gw-MYSERVICE.b8840c-test.svc.cluster.local","Silver PROD","Silver TEST","There are use cases where the clients that are consuming the API are on the same Openshift platform that the API is deployed to. In this case, there is a security benefit of not making the API endpoints publically available.","To support this, the route hosts can be updated with a host that follows the format: api-name.cluster.local. When the configuration is published to Kong, an Openshift Service is created with a corresponding Service Serving Certificate (SSC), which is routeable from within the Openshift cluster.","To verify that the endpoint is callable, you can deploy a simple pod that mounts the service-ca to be used for verifying the SSC.","You should see a 200 response with a valid UUID."]},{"l":"Using an OpenAPI Spec","p":["With version 2 of the GWA CLI, the OpenAPI to Kong configuration generator has been removed from the CLI and is now recommended to use Kong's deck command line.","Reference: https://docs.konghq.com/deck/latest/","Follow the installation instructions here: https://docs.konghq.com/deck/latest/installation/","Below is an example of a simple OpenAPI spec that we will use to generate a Kong configuration file.","Add in some Kong specific metadata:","Save to openapi.yaml.","Generate Kong Configuration:","Publish:"]}],[{"l":"Upstream Service Setup"},{"l":"Upstream Services on OCP","p":["We have Kong Data Planes running on Platform Service's Silver and Gold Private Openshift clusters. If your upstream services run on one of these clusters, then you will need to configuration the network polices to allow access from the API Gateway. Additionally, if you are interested in private routing, there is a section that covers this in detail below."]},{"l":"Network Policies","p":["If your service is running on the Openshift platform, you should specify the Kubernetes Service in the Service.host. It must have the format: name.ocp-namespace.svc. Also, make sure your Service.port matches your Kubernetes Service Port. Any Security Policies for egress from the Gateway will be setup automatically on the API Gateway side.","The Kong Gateway runs Data Planes in both Silver and Gold clusters.","Silver Cluster","You will need to create a Network Policy on your side similar to the following to allow the Gateway's test and prod environments to route traffic to your API:","Gold Cluster","If your service is running on Gold, you will need to contact the APS team so that we can properly provision the namespace on the correct Kong Data Plane and ensure the correct DNS is setup for your routes. The following is the Network Policy on Gold."]},{"l":"Upstream Services with mTLS","p":["Require mTLS between the Gateway and your Upstream Service? To support mTLS on your Upstream Service, you will need to provide client certificate details and if you want to verify the upstream endpoint then the ca_certificates and tls_verify is required as well. Example:","NOTE: You must generate a UUID ( python -c 'import uuid; print(uuid.uuid4())') for each certificate and ca_certificate you create (set the id) and reference it in your services details.","HELPER: Python command to get a PEM file on one line: python -c 'import sys; import json; print(json.dumps(open(sys.argv[1]).read()))' my.pem"]}],[{"l":"API Discovery"},{"l":"Share your API for Discovery","p":["Package your APIs and make them available for discovery through the API Services Portal and BC Data Catalogue.","The API Services Portal Directory organizes your APIs by Datasets, Products and Environments. You can manage them via the CLI, the API or through the UI.","Go to Gateway Administration for links to the Directory API."]},{"l":"Setup your Draft Dataset","p":["If you do not have a Dataset already defined in the BC Data Catalogue, you can create a draft in the API Services Portal:","Click Help in the top right, then API Docs","Click the green Authorize button, then enter your Client ID and Secret","Click the PUT /namespaces/{ns}/datasets accordion item","Click Try it out, enter your namespace, personalize any fields in the Request body, remove the lines pertaining to organization, and click Execute","Scroll down and ensure a 200 Response was received","List of available organizations:","https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/organizations","Use the following to get the organizationUnit:","https://api-gov-bc-ca.test.api.gov.bc.ca/ds/api/v2/console/#/Organizations/organization-units"]},{"l":"Setup your Product","p":["How to add a Product:","Navigate to Namespaces -> Products","Click New Product in the top right","How to associate Product with a Dataset:","Click the ellipses next to Add Env","Find your newly created dataset and click Update","There are various patterns for protecting an API that the Kong API Gateway supports. In the following example, the API is protected with Kong's API Key and ACL plugins ( kong-api-key-acl flow)."]},{"l":"Update Gateway Configuration","p":["In the previous section the example defined an environment that is protected using Kong's API Key and ACL plugins. To protect the Service, the corresponding plugins need to exist on the Gateway for that service or route. The ACL allow corresponds to the unique Environment ID defined in Section 9.2.","How to Update Gateway Configuration:","In Namespaces -> Products, click edit next to product environment","For Authorization, choose Kong API Key with ACL Flow. Assign Terms of Use if desired.","Check Require Approval","Click View Plugin Template, and add the plugin configuration to the service a-service-for-$NS in the gwconfig.yaml file you created in Section 3.","Re-run the publish command: ./gwa pg gwconfig.yaml. This will protect the upstream service with an API Key.","Back in the portal, click Continue","Drag and drop the available service to Active Services","Click Save"]},{"l":"Enabling for Discovery","p":["Once the content is complete and you have applied the appropriate controls to your API, you are ready to make it available on the API Directory.","Prerequisite: Your namespace must be approved for use by a Ministry Organization Administrator. This is a one-time process to link the Ministry to the Namespace and can be requested here: https://dpdd.atlassian.net/servicedesk/customer/portal/1/group/2/create/118","Once approved, you must make an Environment active for the corresponding Product Environment to appear in the API Directory. You can do this by either updating the Product Environment configuration above to active: true, or going to the API Services Portal UI and editing the Environment details."]},{"l":"View Your Product in the API Directory","p":["Find your API in the API Services Portal Directory.","Environment","API Services Portal Directory Link","TEST / TRAINING","https://api-gov-bc-ca.test.api.gov.bc.ca/devportal/api-directory","PRODUCTION","https://api.gov.bc.ca/devportal/api-directory","It is now ready to receive access requests from the community!"]}],[{"l":"API Access"},{"l":"Use the Access Approval Process","p":["Enable approval for an Environment and go through the access request process by requesting access, and playing the role of Access Manager to review the request and approve access."]},{"l":"Manage Access and Controls","p":["NOTE: To manage access to your APIs, you must have the Access.Manage permission for the Namespace.","As an Access Manager, you can manage the new Consumer by going to the Namespaces tab, and selecting Consumers.","Here you should see the newly created Consumer. Click on the name.","You can administer Controls such as rate limiting and IP restrictions.","You can administer Authorization by toggling access to the particular Product and Environment."]}],[{"l":"GWA CLI Commands","p":["GWA CLI helps manage gateway resources in a declarative fashion."]},{"l":"apply","p":["Usage: gwa apply [flags]","Apply your GatewayService, CredentialIssuer, DraftDataset, and Product resources. Use the generate-config command to see examples of these resources.","Flags","Flag","Description","-i, --input string","YAML file containing your configuration (default \"gw-config.yml\")","Examples"]},{"l":"config","p":["Usage: gwa config","Configuration commands"]},{"i":"configget","l":"config.get","p":["Usage: gwa config get [key]","This is a convenience getter to print out the currently stored global setting for the following arguments","api_key","host","namespace"]},{"i":"configset","l":"config.set","p":["Usage: gwa config set [key] [value] [flags]","Exposes some specific config values that can be defined by the user.","Configurable Settings: namespace: The default namespace used token: Use only if you have a token you know is authenticated host: The API host you wish to communicate with scheme: http or https","Flags","Flag","Description","--host string","set the host","--namespace string","set the namespace","--scheme string","set the scheme","--token string","Examples"]},{"l":"generate-config","p":["--org string","--org-unit string","-o, --out string","-s, --service string","-t, --template string","-u, --upstream string","A unique service subdomain for your vanity url: https://.api.gov.bc.ca","Description","Examples","Flag","Flags","Generate gateway resources based on pre-defined templates","Name of a pre-defined template (kong-httpbin, client-credentials-shared-idp)","Set the organization (default \"ministry-of-citizens-services\")","Set the organization unit (default \"databc\")","The file to output the generate config to (default \"gw-config.yml\")","The upstream implementation of the API","Usage: gwa generate-config [flags]"]},{"l":"get","p":["Usage: gwa get [type] flags [flags]","Get gateway resources. Retrieve a table of datasets, issuers, organizations, org-units or products.","Flags","Flag","Description","--json","Return output as JSON","--org string","Organization to filter results by","--yaml","Return output as YAML","Examples"]},{"l":"init","p":["Command 'init' is deprecated. .env files are no longer used, see config command"]},{"l":"login","p":["Usage: gwa login [flags]","You can login via device login or by using client credentials.","Flags","Flag","Description","--client-id string","Your gateway's client ID","--client-secret string","Your gateway's client secret","Examples"]},{"l":"namespace","p":["Usage: gwa namespace","Namespaces are used to organize your services."]},{"i":"namespacecreate","l":"namespace.create","p":["Usage: gwa namespace create [flags]","Create a new namespace","Flags","Flag","Description","-d, --description string","optionally add a description","-g, --generate","generates a random, unique namespace","-n, --name string","optionally define your own namespace","Examples"]},{"i":"namespacecurrent","l":"namespace.current","p":["Usage: gwa namespace current","Display the current namespace"]},{"i":"namespacedestroy","l":"namespace.destroy","p":["Usage: gwa namespace destroy [flags]","Destroy the current namespace","Flags","Flag","Description","--force","force deletion"]},{"i":"namespacelist","l":"namespace.list","p":["Usage: gwa namespace list","List all your managed namespaces"]},{"l":"publish","p":["Command 'publish' is deprecated. Use apply instead."]},{"l":"publish-gateway","p":["--dry-run","--qualifier string","$ gwa pg --dry-run sample.yaml","$ gwa pg sample.yaml","A directory relative to the current directory","A space-separated list of specific YAML files in the current directory, or","Description","Dry run your API changes before committing to them","Empty, which means find all the possible YAML files in the current directory and publish them","Examples","Flag","Flags","If you want to see the expected changes but not actually apply them, you can run:","inputs accepts a wide variety of formats, for example:","Once you have a gateway configuration file ready to publish, you can run the following command to reflect your changes in the gateway:","Sets a tag qualifier, which specifies that the gateway configuration is a partial set of configuration","Usage: gwa publish-gateway [inputs...] [flags]"]},{"l":"status","p":["Usage: gwa status [flags]","Check the status of your services configured on the Kong gateway","Flags","Flag","Description","--json","Output status as a JSON string","Examples"]}],[{"l":"Supported Plugins","p":["Current list of plugins available on the API Gateway.","NOTE: The httplog is not available for individual teams to use as it is used at a global level to feed logs to other systems for audit/monitoring/etc.","If there are other plugins that you would like to have added to the Gateway, please reach out to us at our Rocket.Chat channel #aps-ops.","For information about execution order, see: https://docs.konghq.com/gateway/latest/plugin-development/custom-logic/#plugins-execution-order"]},{"l":"Plugin Priorities","p":["https://docs.konghq.com/gateway/2.8.x/plugin-development/custom-logic/#plugins-execution-order"]}],[{"l":"Common Controls","p":["The following are sample Gateway controls for common scenarios."]},{"l":"Returning an HTTP Redirect"},{"l":"Request Termination"},{"l":"Adding Headers For Best Security Practices","p":["For further information on individual headers, see: https://owasp.org/www-project-secure-headers/"]},{"l":"Rate Limit"},{"i":"option-1---using-a-distributed-cache","l":"Option 1 - Using a Distributed Cache","p":["This provides the most accurate because it uses a centralized Cache that all Kong nodes use. The downside is that there is a 100-200ms latency."]},{"i":"option-2---node-local-caching","l":"Option 2 - Node Local Caching","p":["This provides the fastest rate limiting option, with minimal latency (~ 1ms). The downside is that it is local to each node so calculating the actual load on your upstream is a function of the number of nodes."]},{"l":"Two-tiered access setup","p":["The key-auth and jwt-keycloak plugins support the concept of allowing \"anonymous\" access, which allows you to define a \"free\" service which might have limits around it (like only allowing 100 requests/minute), and then an \"elevated\" access where the Consumer would get an improved level of service, such as higher rate limits.","There is a global \"anonymous\" consumer that is identified as \"ce26955a-cf08-4907-9427-12d01c8bd94c\" in both our Test and Production environments.","To enable anonymous access to your API, update your plugin configuration with:"]},{"l":"key-auth"},{"l":"jwt-keycloak"},{"l":"Event Metric","p":["This pre-function allows you to collect arbitrary metrics that you can then track in the APS Grafana instance ( https://grafana.apps.gov.bc.ca/)."]},{"l":"Disabling global error handling","p":["APS has a global post-function plugin that transforms the response message if the following HTTP status codes are returned by the upstream service:","If this transformation is not desired, you can override it by including the following plugin on your Service:"]}],[{"l":"Access Control List","p":["Reference: https://docs.konghq.com/hub/kong-inc/acl/"]},{"l":"Use Cases","p":["Typically this is used when your Environment configuration uses the flow kong-api-key-acl or kong-acl-only where the allow group is a special group defined for the Environment so that Access Managers can grant/revoke access to the Service from the API Services Portal."]},{"l":"Example"}],[{"i":"cross-origin-resource-sharing-cors","l":"Cross-origin Resource Sharing (CORS)","p":["Reference: https://docs.konghq.com/hub/kong-inc/cors/","Example","Additional references:","https://github.com/Kong/kong/issues/4859"]}],[{"l":"GWA IP Anonymity"},{"l":"Use Cases","p":["A user's IP address is considered part of PII (Personally Identifiable Information). This is a custom plugin that was created to mask the last segment of the IP address before it is sent to the Upstream Service."]},{"l":"Example"}],[{"l":"JWT Keycloak"},{"l":"Example"},{"l":"Key Fields","p":["A list of allowed issuers for this route/service/api. Can be specified as a string or as a Pattern.","access_token_header","Allowed audience for this route/service/api. Can be specified as a string or as a Pattern.","allowed_aud","allowed_iss","An alternate header to use instead of \"Authorization\"","boolean","client_roles","Default","Description","disable_access_token_header","false","Field","If set to 'true', the access token will not be sent to the upstream service","In the event of a 401, this value gets populated in the \"WWW-Authenticate\" response header as Bearer realm=realm","List of Client/Roles in the format CLIENT_NAME:ROLE_NAME where there has to be at least one match.","nil","realm","string","string[]","Type"]},{"l":"Multiple Issuers","p":["When you have an API that is consumed by your own frontend and potentially by some internal processes, and you would also like to give limited access to the API to external parties, such as other Ministry services, then you can use the API Gateway to protect the API.","An example configuration that uses RBAC and verification of User Tokens using the SSO Standard Realm and Service Account Tokens using APS's Shared IdP:"]}],[{"l":"Key Auth","p":["Reference: https://docs.konghq.com/hub/kong-inc/key-auth/"]},{"l":"Example"}],[{"l":"Kong Upstream Auth Basic","p":["Reference: https://docs.konghq.com/hub/revolution_systems/upstream-auth-basic/"]},{"l":"Example"}],[{"l":"Kong Upstream JWT","p":["Reference: https://docs.konghq.com/hub/optum/kong-upstream-jwt"]},{"l":"Example"},{"l":"JWKS","p":["Environment","URL","Test/Training","https://aps-jwks-upstream-jwt-api-gov-bc-ca.test.api.gov.bc.ca/certs","Production","https://aps-jwks-upstream-jwt.api.gov.bc.ca/certs"]},{"l":"Clients"},{"i":"javascript-express","l":"Javascript (Express)","p":["For this example, the kong-upstream-jwt plugin should be configured with:","npm i express express-oauth2-jwt-bearer","For test/training environment:"]},{"i":"python-fastapi","l":"Python (FastAPI)","p":["For this example, the kong-upstream-jwt plugin should be configured with:","pip install fastapi uvicorn pyjwt","For test/training environment:","NOTE: If you are trying to run this on a Mac and you get unable to get local issuer certificate, you may need to run: open /Applications/Python\\ 3.11/Install\\ Certificates.command to install the latest CA certificates."]}],[{"l":"OIDC","p":["NOTE: The oidc plugin is only used with endpoints ending with .apps.gov.bc.ca, please reach out to the APS team on Rocket.Chat #aps-ops to get this permission added to your namespace."]},{"l":"Example"}],[{"l":"OIDC Consumer","p":["Description: This plugin is used in conjunction with the oidc plugin to map the JWT Token to a Kong Consumer."]},{"l":"Example"}],[{"l":"Proxy Cache","p":["Reference: https://docs.konghq.com/hub/kong-inc/proxy-cache/"]},{"l":"Example","p":["cache_ttl: We only allow this value to be between 15 and 60 seconds","The strategy and memory.dictionary_name will be set automatically and can not be overridden.","vary_headers: Relevant request headers considered for the cache key. If undefined, none of the headers are taken into consideration.","vary_query_params: Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.","The dictionary_name is capped at 1Mi to be shared across all services. Recommended practice is to use the cache for targeted files to produce the greatest improvement on overall performance of your application."]}],[{"l":"Rate Limiting","p":["Reference: https://docs.konghq.com/hub/kong-inc/rate-limiting/","policy: local| redis","limit_by: consumer| credential | ip | service | header | path","fault_tolerant: Applies when Kong is connecting to Redis - if Redis is down, do you want to block traffic, or allow it through without limiting"]},{"l":"Example"},{"l":"Alternatives","p":["If you want to apply 2 global rate limits, you can use the plugin: rate-limiting_902.","For example, one control with limit_by = service that provides an umbrella max requests per minute and another control with limit_by = credential that ensures each authenticated user plays nice."]}],[{"l":"Request Transformer","p":["Reference: https://docs.konghq.com/hub/kong-inc/request-transformer/"]},{"i":"example","l":"Example:"}],[{"l":"Waiting Queue","p":["This uses the cloned plugin: jwt-keycloak_1010.","It is to support Waiting Queue solutions, such as https://github.com/bcgov/WaitingQueue"]},{"l":"Example"},{"l":"Key Fields","p":["A list of allowed issuers for this route/service/api. Can be specified as a string or as a Pattern.","access_token_header","Allowed audience for this route/service/api. Can be specified as a string or as a Pattern.","allowed_aud","allowed_iss","An alternate header to use instead of \"Authorization\"","boolean","Default","Description","disable_access_token_header","false","Field","If set to 'true', the access token will not be sent to the upstream service","In the event of a 401, this value gets populated in the \"WWW-Authenticate\" response header as Bearer realm=realm","nil","realm","string","string[]","Type"]},{"i":"waiting-queue--user-credentials","l":"Waiting Queue + User Credentials","p":["If the Waiting Queue token is invalid, then the response will be:","If the User's token is invalid, then the response will be:","The Waiting Queue plugin ( jwt-keycloak_1010) will be evaluated first."]}],[{"l":"SSL Termination","p":["If you would like to verify the SSL endpoint for *.api.gov.bc.ca, you can run the following two commands and compare the fingerprint and serial no."]},{"i":"apigovbcca","l":"*.api.gov.bc.ca","p":["1B588948FBB2","20:7D:15:9D:42:BE:CC:BC:FD:EF:DF:13:77:C7:25:A3","2D:E5:32:16:C6:0A:0D:F4:0C:1F:39:DD:BD:DD:A8:1A","34A6625E5ECF","3B5849D8A670","4D:EA:CE:C4:0A:73:67:D3:B4:03:F6:63:C4:E1:67:2C","52:78:CD:99:3C:00:4E:4F:57:CD:EF:71:B9:E2:53:08","74BC58EEA87E","7876EB597E14","Deployed","E3:DF:EC:89:BC:03:9B:E9:7D:57:91:EB:52:18:59:46","Expires","Feb 16 2021","Feb 25 2021","Issue Date","Oct 13 2023","Oct 16 2021","Oct 16 2022","Oct 16 2023","Oct 16 2024","Oct 2022","Oct 4 2023","Oct 6 2020","Oct 6 2021","Sep 27 2021","Sep 28 2022","Serial No.","SHA1 Fingerprint (abbrev.)","You can run the above as one line:"]},{"l":"Internal Notes","p":["Individual File Verification","Cert/Key Verification"]}],[{"l":"1. Login","p":["API Owner Login"]}],[{"l":"2. Create Service Account","p":["Create Service Account"]}],[{"l":"3. Switch Namespace","p":["Switch Namespace"]}],[{"i":"4-requestapprove-access","l":"4. Request/Approve Access"},{"l":"Request Access"},{"l":"Approve Access"}],[{"l":"5. Consumer Maintenance"},{"l":"Maintain Consumer Roles"},{"l":"Maintain Consumer Scopes"}],[{"l":"Web Sequence Diagrams"},{"l":"API Owner Login"},{"l":"Switch Namespace"},{"l":"Create Service Account"},{"l":"Request Access"},{"l":"Approve Access"},{"l":"Maintain Consumer Scopes and Roles"}],[{"l":"Releases"},{"l":"2023","p":["Release Date","Release","2023 Nov 8","1.2.15 Minor Release","2023 Sept 19","1.2.14 Minor Release","2023 Jun 19","1.2.12 Minor Release","2023 Mar 14","1.2.11 Minor Release","2023 Jan 19","1.2.6 Minor Release"]},{"l":"2022","p":["Release Date","Release","2022 Oct 26","1.2.5 Minor Release","2022 Sept 29","1.2.4 Minor Release","2022 Sept","1.2.3 Minor Release","2022 Aug","1.2 Major Release","2022 May","1.1 Major Release"]},{"l":"2021","p":["Release Date","Release","2021 Jun","1.0 Beta Release"]}],[{"i":"api-services-portal-release-1215","l":"API Services Portal Release 1.2.15","p":["The API Services Portal has been updated with some bug fixes."]},{"l":"Fixes","p":["'Service Account' section description is inaccurate #935","Address requestor as Portal User in the Email Notifications when name is not available #186","Batch sync not returning non-200 when there are errors #931","Confirm when deleting resources #880","Consumers appearing multipe times (#920)","Enabling API publishing toggle button: Label and description change #936","Enhanced error messaging for consumer and product deletion (#927)","Hard delete ( force delete) cause namespace list service fails and does not display namespaces in the drop down #876","Hard delete of Namespace (/namespaces/?force=true) cause the application inaccessible (throws 502 Bad Gateway Error) #459","Improve the UX of revoking access and deleting consumer #715","Mark can Grant Access to the service for the environment which is pending for approval #475","Namespace creation regex (#917)","Prevent clients from accidentally using the incomplete ‘Manual’ authorization mode #621","Product without environments giving an error #918","Request access button showing for public flow #924","Revoke product environment access to consumer does not work #925","Route not appearing in Portal after creating using v2 of gwa cli #921","When requesting access giving an error that is difficult to troubleshoot #788"]}],[{"i":"api-services-portal-release-1214","l":"API Services Portal Release 1.2.14","p":["The API Services Portal has been updated with a new feature and some bug fixes."]},{"l":"Features","p":["GWA-CLI V2","Gateway Command Line Interface Version 2 (GWA-CLI V2) is a new and improved command line interface to use when configuring your API Gateway settings. Improvements include:","Improved onboarding experience","Ability to create a namespace from the command line","Templates for using common authorization patterns on the API Gateway"]},{"l":"Fixes","p":["There was a bug that displayed inactive environments in the portal. We now filter out inactive environments from the drop down menu.","Some changes to the BC Data Catalogue were not being reflected in the APS Portal. This has been resolved so all datasets are synced with the BC Data Catalogue."]}],[{"i":"api-services-portal-release-1212","l":"API Services Portal Release 1.2.12","p":["The API Services Portal has been updated with a new feature, enhancements, and bug fixes."]},{"l":"Features","p":["#518- Private Key : Added a way for clients to provide a public certificate while requesting access, and a self-serve way to update your public certificate."]},{"l":"Enhancements","p":["#773- When configuring environment services, you can drag and drop your \"available services\" into \"active services\". We added more UI feedback to this screen, so it is clear when you have dragged something into the \"active services\" area."]},{"l":"Fixes","p":["#785- In the APS portal, the Help menu contained the wrong link to the release notes page. The Help menu now contains the correct link.","#789- There was a bug that incorrectly displayed the logged in user as the owner of an Authorization Profile, even if they were not. This has been fixed, and the correct owner of the Authorization Profile is always displayed."]}],[{"i":"api-services-portal-release-1211","l":"API Services Portal Release 1.2.11","p":["The API Services Portal has been updated with new features, enhancements, and bug fixes."]},{"l":"Enhancements","p":["UI Improvements to the \"Namespace Access\" page","UX improvements in the \"Create New Namespace\" modal","Removed the documentation tab from the portal site due to it not being used, and becoming out of date","Added a confirmation modal before a user can delete an application, to reduce human errors","Added routing data (general information about the portal/gateway, such as number of namespaces, list of org admins, most recent logins, etc.) into our metrics dashboard in Grafana.","Better Activity descriptions for gateway config changes"]},{"l":"Fixes","p":["Fixed a bug where environments were failing to validate, and were showing \"Unexpected error validating environment\"","Fixed a bug where environments with Authorization Code flow were not able to save","Fixed errors when consumer access requests were approved","Fixed various bug fixes to the Organization Assignment flow","Fixed a bug where Gateway Metrics were not appearing in the Portal","Fixed a bug where a duplicate consumer would appear on the Ops Metrics","Fixed bug where dry run gateway publish still records activity indicating an update","Fixed an error that occurred when deleting a namespace"]}],[{"i":"api-services-portal-release-126","l":"API Services Portal Release 1.2.6","p":["The API Services Portal has been updated with new features, enhancements, and bug fixes."]},{"l":"New Features","p":["Shared IdP:","This feature allows API Providers to leverage the SSO Gold-tier Keycloak cluster to manage Client Credentials without having to deal directly with the cluster. The APS team has a custom realm on this Keycloak cluster called apigw, which is administered by the API Services Portal. To use it, follow these steps.","Private Routing:","This feature allows API Providers to make private API endpoints, which can have security benefits. Learn more here.","New Plugins","Waiting Queue: Support Waiting Queue solutions, such as https://github.com/bcgov/WaitingQueue.","Kong Upstream Auth Basic: Kong Plugin to add HTTP Basic Authentication to the upstream request header.","Edit an application","API Consumers can now edit their existing applications in the portal."]},{"l":"Enhancements","p":["Added about us, privacy, accessibility, copyright, and contact us pages to the site footer","User interface improvements to the Service Accounts page","User interface improvements to the Gateway Services page","User interface improvements to the login pages, and separate login pages created for API providers and API Consumers","User interface improvements to how API Providers publish their APIs and request organization admins to approve their namespace","Updated Kong from release 2.7.2 to release 2.8.3"]},{"l":"Fixes","p":["Minor user interface fixes"]}],[{"i":"api-services-portal-release-125","l":"API Services Portal Release 1.2.5","p":["The API Services Portal has been updated with some enhancements and bug fixes.","Enhancements","User interface and experience improvements to the API Provider products page.","Promote consistency by following the BC Government’s design guidelines","Easier navigation","Fixes","We refactored and migrated data used for IDIR authentication. This was done to increase the security of IDIR data.","If an API Provider edited controls for a product and missed required information, the changes appeared successful but were not saved. This issue has been resolved by adding a warning that prompts users to enter missing information.","When an API Consumer deleted an application, the application appeared to still exist because the system was not refreshing the page with the new list of applications. This issue has been fixed, and deleted applications appear deleted immediately.","The system was experiencing issues with client roles, preventing API Consumers from using APIs. This issue has been resolved so that:","Roles are set properly on access approval","Roles can be modified in the Consumer Environment dialog","Roles appear in the generated Bearer Token using the credentials a Developer receives","If an API Provider changed their own access permissions to a Namespace and continued to manage the Namespace, errors occurred, and re-login was required. Now, when a user updates their own permissions, the permissions are updated immediately for their current session and re-login is not required.","If an API Provider created a dataset without a title, all products on the Namespace’s Products page showed errors for all users. Entering a title is now mandatory so this scenario cannot occur."]}],[{"i":"api-services-portal-release-124","l":"API Services Portal Release 1.2.4","p":["The API Services Portal has been updated with a new feature, some enhancements, and some bug fixes.","Features","API Providers can search past activity in a Namespace, enabling them to better serve clients and help troubleshoot issues.","Enhancements","Improved design considerations were added to pages with no data currently available to display.","The design of the Namespace Access section for API managers has been refreshed; enhancements include grouping by access roles, inline search, and sortable tables.","Fixes","When viewing the details of a request, the “approver” shows as the name of the individual who sent the request, rather than the name of the individual who approved the request. A fix has been applied to display the correct requestor and approver names.","All API Consumer names were displaying with the @idir domain, even if the API Consumer’s identity provider was different. A fix has been applied to display the correct identity provider.","Several formatting and sorting issues on the consumers page have been corrected."]}],[{"i":"api-services-portal-release-123","l":"API Services Portal Release 1.2.3","p":["The API Services Portal has been updated with a new feature:","Integration with BC Services Card","API consumers can now use BC Services Card for login authentication.","Note: Authentication options are not interchangeable. If you choose to use BC Services Card, and were previously using an alternative authentication method (such as Business BCeID, GitHub, or IDIR), your existing account’s settings and services will not be linked. We suggest that you continue using your original authentication credential."]}],[{"i":"api-services-portal-release-12","l":"API Services Portal Release 1.2","p":["The API Services Portal has been updated with enhancements to existing features.","Redesign of the user interface for Providers to manage Consumers","User experience improvements have been made to how providers review, approve, or reject an access request","Providers can assign labels to a Consumer, so that the Consumer can be searched by a label in the future","Providers can filter Consumers by products, environments, labels, scopes, and roles. These filters allow Providers to easily categorize and find Consumers","Providers can create labels for a Consumer when approving a Consumer’s access","Providers can edit a consumer’s labels","Providers can review the access a Consumer has, to determine if the access is appropriate","Providers can grant additional access to an existing Consumer, in limited circumstances"]}],[{"i":"api-services-portal-release-11","l":"API Services Portal Release 1.1","p":["Activity details at the Organization and Namespace levels","Added a new user interface to display user profile information","API Directory → Request Access:","Cascade deletion of Namespace and/or Environment that includes #342:","Changed the editing and creating of authorization profiles for easier navigation","Changed the request access flow for easier navigation","Configuration for Get Gateway Services","Delete option for Environment and Namespace with required (force) verification","Directory API V2 is released with the following features:","Enhancements","Improved the look and feel","Improved validation of Environment activation:","Information details for each of Get Namespace Dataset, Product, Content, and Issuer","Logging any activity for the deleted namespace","Modified the user interface to promote consistency and meet accessibility standards","My Access and Applications pages:","My Profile page:","Namespace must be assigned to an Organization","Namespaces → Authorization Profiles:","New Features","Note: Directory API V1 will reach end of life and be deprecated on October 31, 2022; at this time Directory API V1 will be unavailable and no longer supported.","Organization access management (including membership and namespace assignment) #315:","Organization Group access displays on the Namespace Access page","Product dataset must belong to the same Organization","Revoking of all related consumer access","Revoking of Service Accounts","The API Services Portal has been updated with changes that include user experience improvements, new features, and enhancements to existing features.","The following aspects of the APS Portal user experience have been modernized:","User Experience (UX) Upgrades","Verifying no Gateway Services still exist"]}],[{"i":"api-services-portal-beta-is-live","l":"API Services Portal BETA is Live!","p":["We are happy to announce that the API Services Portal has been released into Production.","A few notable points:","The following applications have reached end-of-life and are now demised:","ARGG: If you would like to publish an API, please follow the steps in the API Owner User Journey.","KQ: Requesting access to APIs is now done via the Directory page on the API Services Portal.","API Keys: API Keys provides a way for developers to generate API Keys for access to BC Gov APIs in non-production environments. This is now done via the Directory page on the API Services Portal.","There will be a period of time where API Keys will remain available as we transition clients over to the new API Services Portal - link to old API Keys","If you have questions or require assistance, please visit our RocketChat Channel aps-ops."]},{"l":"Links","p":["API Owner User Journey"]}],[{"l":"Glossary","p":["Term","Definition","Access Control","Access control is a set of security measures that regulate who can access a system, services, data, or resource. Access control policies use authentication and authorization to verify users and enable access.","Access Token","Access tokens enable clients to securely call protected APIs. The APIs use the access tokens to perform authentication and authorization. The information in the access token verifies that a user is entitled to access an API."]},{"l":"API","p":["A namespace is a collection of Kong Gateway Services and Routes that are managed independently.","A role is a group of predefined access permissions assigned to a user.","A route is a means of exposing a service to users. It is the path used to send requests to its respective service after reaching the Gateway. A single service can have multiple routes.","A service represents an external upstream API or microservice consisting of a URL, which listens for incoming requests.","An API Key is a unique identifier (a random series of letters and numbers) used to authenticate an application accessing a specific API. The application includes the Key in each API request, and the API uses the Key to identify the application and authorize the request. The API Key is used in combination with an API Secret.","An API Provider, usually a developer, creates, publishes, operates, and maintains APIs in the APS Management Platform.","An Application Programming Interface (API) is a software-to-software interface that provides a secure and standardized way for applications to communicate with each other to deliver requested data without user intervention. |","An environment in software development is the collection of stages that an application moves through during development and include development, testing, staging and production.- The development environment is the workspace for developers to design, program, debug, change, etc. an application or system.- Test teams use the testing environment to conduct tests and ensure the quality and functionality of the application or system. Testers can identify bugs, errors, or defects and review fixes.- A staging environment is a replica of a production environment with the purpose of testing code, builds, and updates to ensure quality in a production-like environment before deploying the application or system to the live (production) environment.- Production is the environment where the application or system is in operation and available to end-users.","An Identity Provider (IdP) is a service that stores, maintains, and manages digital identities to authenticate users logging into an application. APS uses a Shared IdP, which is a centralized BC Government IdP (SSO Gold-tier Keycloak cluster) that manages client credentials and user access. The Shared IdP enables entities (APIs, applications, websites, and services) to access secured digital identities in order to control authentication and authorization. By using a Shared IdP, APS enables API providers to delegate the responsibility of authentication and authorization to the Shared IdP while still retaining a high level of security.","An Organization Administrator (Org Admin) is the user responsible for monitoring and managing all APIs for a specific organization (ministry, crown corporation, or agency) on the APS portal. The Org Admins primary responsibility is to approve namespaces and enable publishing on the namespace to allow an API provider to publish an API to the APS directory.","An organization is any ministry, crown corporation, or agency within the B.C. Government.","API Consumer","API Consumers (organizations providing services to end-users) use the APIs available through the APS Platform in the delivery of their services. API Consumers integrate the APIs into their applications.","API Directory","API Gateway","API Key","API Program Services (APS)","API Program Services (APS) is the team responsible for delivering services that enable ongoing access to public sector data by providing support for managing APIs. APS ensures the efficient development and operation of APIs through the APS Platform and API Services Portal.","API Provider","API Secret","API Services Portal","APS Platform","Authentication","Authentication is a security process for verifying the identity of a user or device before allowing access to a system, resource, or function. Authentication validates that a user or system is who they claim to be.","Authorization","Authorization is a security process for providing a user or device with access to a requested system, resource, or function based on permissions. Authorization is provided only after a user or device has been authenticated.","Definition","Environment","If you have comments or feedback on any of these definitions, please submit a Data Systems & Services ticket.","Kong Gateway","Namespace","Organization","Organization Administrator","Publish","Publishing APIs is the process by which an API Provider makes their API publicly available in the API Directory for discovery by API Consumers.","Role","Route","Scope","Scope is a method used to specify authorization, or a set of permissions that grant access to specified systems and actions. Scopes can be applied to both users and service accounts. For example, the API Gateway Namespace.View scope allows read-only access to a namespace; therefore, a user with Namespace.View cannot approve API access requests. To approve an API access request, the user requires the Access.Manage scope, which gives permission to approve or reject access requests.","Service","Shared IdP","Term","The API Directory is a centralized repository where API Providers can securely publish their APIs and API Consumers can find and request access to the published APIs. The APIs in the Directory are available to anyone with access to the APS Portal.","The API Gateway is a service that facilitates the management and execution of APIs by routing requests. It extends the capabilities of APIs with the use of controls such as authentication, authorization, rate limiting, and IP limitations allowing systems to be safely and efficiently integrated.","The API Secret is a software-level credential (password) used to securely authenticate an application or user. The Secret is included in all API requests to identify the Consumer. The API Secret is used in combination with an API Key. The Secret is known only to the Consumer and the API gateway. It is only displayed upon creation and must be recorded by the Consumer.","The API Services Portal is the access point for API Providers and API Consumers to publish, discover, and manage APIs. The APS Portal enables:- API Providers to build, configure, and share their APIs publicly or privately- API Consumers to setup applications, discover APIs available for integration, and send access requests","The APS Platform is the APS backend that enables data providers to manage their APIs and deliver services using the Kong API Gateway Community edition and a combination of tools to provide API security, authentication, routing, and publishing.","The Kong Gateway Service is a data communication service that acts as middleware facilitating the transmission of requests between a client and an application using an API."]}],[{"l":"External Resources","p":["The following resources are offered for guidance on APIs with the purpose of providing information on how to design APIs, follow good patterns, and ensure consistency and structure.","Government of Canada API Store","The API store for the Government of Canada is a one-stop shop for APIs to build applications and services using government data and information. The API Store is the central repository of Federal government department APIs. The API Store enables discovery of APIs, ensures consistent security, provides performance and analytics information, and offers guidance on API life cycle management.","BC Government API Guidelines (DevHub)","The purpose of these guidelines is to promote consistency and provide guidance around the use of Application Programming Interfaces (APIs) across the BC government, and to enable exchange and integration of data between systems, agencies, businesses and citizens.","OpenAPI Initiative","The OpenAPI Initiative guide’s focus is on HTTP-based API designers and writers who want to have their API formalized in an OpenAPI Description document. The description document is a standard, programming language-agnostic interface description for HTTP APIs based on the OpenAPI Specification (OAS).","If you have comments or feedback on any of these resources, please submit a Data Systems & Services ticket."]}],[{"l":"Presentations","p":["ARD and Waiting Room","May 2023 : Presented a Waiting Room solution in our Sprint Review.","Client-Hosted Kong Gateway","Mar 2023 : Presented a proposed solution in our Sprint Review for supporting APS in the Cloud or Emerald platform.","Road to Gold","Jan 2022 : Presented our journey from the Openshift Silver cluster to Gold cluster"]}]]